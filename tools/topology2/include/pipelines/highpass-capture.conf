#
# Volume capture pipeline with Highpass EQ IIR
#
# Pipeline with a highpass IIR filter. All attributes defined herein are namespaced by alsatplg to
# "Object.Pipeline.highpass-capture.attribute_name"
#
# Usage: this component can be used by declaring in the top-level topology conf file as follows:
#
# 	Object.Pipeline.highpass-capture."N" {
#		format		"s16le"
#		period		1000
#		time_domain	"timer"
#		channels	2
#		rate		48000
#	}
#
# Where N is a unique integer for pipeline ID in the same alsaconf node.
#

#
# (source) host.N.capture <- buffer.N.0 <- volume.N.0 <- buffer.N.1 <- eqiir.N.0 <- buffer.N.2 (sink endpoint)
#
Class.Pipeline."highpass-capture" {

	# Pipeline ID
	DefineAttribute."index" {
		type "integer"
	}

	# Include common pipeline attribute definitions
	<include/pipelines/pipeline-common.conf>

	attributes {
		!constructor [
			"index"
		]
		!mandatory [
			"channels"
			"format"
			"rate"
		]
		!immutable [
			"direction"
		]
		unique	"index"
	}

	Object.Widget {
		pipeline."0" {}

		host."0" {
			widget_type		"aif_out"
		}

		buffer."0" {
			periods	2
			caps		"host"
		}

		pga."0" {
			# set TLV scale for volume control mixer
			Object.Control.mixer."0" {
				Object.Base.tlv."vtlv_m50s1" {
					Object.Base.scale."m50s1" {
						min	-5000
						step	100
					}
				}
			}
		}

		buffer."1" {
			periods	2
			caps		"host"
		}

		eqiir."0" {
			# byte control for EQ IIR
			Object.Control.bytes."0" {
				access [
					tlv_write
					tlv_read
					tlv_callback
				]
			}
		}

		buffer."2" {
			periods	2
			caps		"dai"
		}
	}

	# Pipeline connections
	Object.Base {
		route."0" {
			source	buffer..0
			sink host..capture
		}

		route."1" {
			source	pga..0
			sink	buffer..0
		}

		route."2" {
			source	buffer..1
			sink	pga..0
		}

		route."3" {
			source	eqiir..0
			sink	buffer..1
		}

		route."4" {
			source	buffer..2
			sink	eqiir..0
		}
	}

	direction 	"capture"
	time_domain	"timer"
	period		1000
	channels	2
	rate		48000
	priority	0
	core 		0
	frames		0
	mips		5000
}
